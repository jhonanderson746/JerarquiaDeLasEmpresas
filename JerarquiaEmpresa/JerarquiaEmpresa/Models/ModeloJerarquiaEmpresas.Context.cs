//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JerarquiaEmpresa.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDJerarquiaDeEmpresaEntities : DbContext
    {
        public BDJerarquiaDeEmpresaEntities()
            : base("name=BDJerarquiaDeEmpresaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TblDepartamento> TblDepartamento { get; set; }
        public virtual DbSet<tblEmpresa> tblEmpresa { get; set; }
        public virtual DbSet<tblSubDepartamento> tblSubDepartamento { get; set; }
    
        public virtual int EliminarEmpresa(Nullable<int> nit)
        {
            var nitParameter = nit.HasValue ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarEmpresa", nitParameter);
        }
    
        public virtual int RegistrarDepartamento(string nomDepartamento, string nomGerenteDpto, Nullable<int> telGerenteDpto, Nullable<System.DateTime> fechaNacimtGerenteDpto, Nullable<System.DateTime> fechaInicioGerenciaDpto, Nullable<int> nitEmpresa)
        {
            var nomDepartamentoParameter = nomDepartamento != null ?
                new ObjectParameter("NomDepartamento", nomDepartamento) :
                new ObjectParameter("NomDepartamento", typeof(string));
    
            var nomGerenteDptoParameter = nomGerenteDpto != null ?
                new ObjectParameter("NomGerenteDpto", nomGerenteDpto) :
                new ObjectParameter("NomGerenteDpto", typeof(string));
    
            var telGerenteDptoParameter = telGerenteDpto.HasValue ?
                new ObjectParameter("TelGerenteDpto", telGerenteDpto) :
                new ObjectParameter("TelGerenteDpto", typeof(int));
    
            var fechaNacimtGerenteDptoParameter = fechaNacimtGerenteDpto.HasValue ?
                new ObjectParameter("FechaNacimtGerenteDpto", fechaNacimtGerenteDpto) :
                new ObjectParameter("FechaNacimtGerenteDpto", typeof(System.DateTime));
    
            var fechaInicioGerenciaDptoParameter = fechaInicioGerenciaDpto.HasValue ?
                new ObjectParameter("FechaInicioGerenciaDpto", fechaInicioGerenciaDpto) :
                new ObjectParameter("FechaInicioGerenciaDpto", typeof(System.DateTime));
    
            var nitEmpresaParameter = nitEmpresa.HasValue ?
                new ObjectParameter("NitEmpresa", nitEmpresa) :
                new ObjectParameter("NitEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarDepartamento", nomDepartamentoParameter, nomGerenteDptoParameter, telGerenteDptoParameter, fechaNacimtGerenteDptoParameter, fechaInicioGerenciaDptoParameter, nitEmpresaParameter);
        }
    
        public virtual int RegistrarEmpresa(string nitEmpresa, string nombreEmpresa, Nullable<int> telEmpresa, string dirEmpresa)
        {
            var nitEmpresaParameter = nitEmpresa != null ?
                new ObjectParameter("nitEmpresa", nitEmpresa) :
                new ObjectParameter("nitEmpresa", typeof(string));
    
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("nombreEmpresa", nombreEmpresa) :
                new ObjectParameter("nombreEmpresa", typeof(string));
    
            var telEmpresaParameter = telEmpresa.HasValue ?
                new ObjectParameter("TelEmpresa", telEmpresa) :
                new ObjectParameter("TelEmpresa", typeof(int));
    
            var dirEmpresaParameter = dirEmpresa != null ?
                new ObjectParameter("DirEmpresa", dirEmpresa) :
                new ObjectParameter("DirEmpresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarEmpresa", nitEmpresaParameter, nombreEmpresaParameter, telEmpresaParameter, dirEmpresaParameter);
        }
    
        public virtual int RegistrarSubDepartamento(string nomSubDepartamento, string nomGerenteSubDpto, Nullable<int> telGerenteSubDpto, Nullable<System.DateTime> fechaNacimtGerenteSubDpto, Nullable<System.DateTime> fechaInicioGerenciaSubDpto, Nullable<int> idDepartamento)
        {
            var nomSubDepartamentoParameter = nomSubDepartamento != null ?
                new ObjectParameter("NomSubDepartamento", nomSubDepartamento) :
                new ObjectParameter("NomSubDepartamento", typeof(string));
    
            var nomGerenteSubDptoParameter = nomGerenteSubDpto != null ?
                new ObjectParameter("NomGerenteSubDpto", nomGerenteSubDpto) :
                new ObjectParameter("NomGerenteSubDpto", typeof(string));
    
            var telGerenteSubDptoParameter = telGerenteSubDpto.HasValue ?
                new ObjectParameter("TelGerenteSubDpto", telGerenteSubDpto) :
                new ObjectParameter("TelGerenteSubDpto", typeof(int));
    
            var fechaNacimtGerenteSubDptoParameter = fechaNacimtGerenteSubDpto.HasValue ?
                new ObjectParameter("FechaNacimtGerenteSubDpto", fechaNacimtGerenteSubDpto) :
                new ObjectParameter("FechaNacimtGerenteSubDpto", typeof(System.DateTime));
    
            var fechaInicioGerenciaSubDptoParameter = fechaInicioGerenciaSubDpto.HasValue ?
                new ObjectParameter("FechaInicioGerenciaSubDpto", fechaInicioGerenciaSubDpto) :
                new ObjectParameter("FechaInicioGerenciaSubDpto", typeof(System.DateTime));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarSubDepartamento", nomSubDepartamentoParameter, nomGerenteSubDptoParameter, telGerenteSubDptoParameter, fechaNacimtGerenteSubDptoParameter, fechaInicioGerenciaSubDptoParameter, idDepartamentoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int EliminarDepartamento(Nullable<int> idDepartamento)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarDepartamento", idDepartamentoParameter);
        }
    
        public virtual int EliminarSubDepartamento(Nullable<int> idSubDepartamento)
        {
            var idSubDepartamentoParameter = idSubDepartamento.HasValue ?
                new ObjectParameter("IdSubDepartamento", idSubDepartamento) :
                new ObjectParameter("IdSubDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarSubDepartamento", idSubDepartamentoParameter);
        }
    }
}
